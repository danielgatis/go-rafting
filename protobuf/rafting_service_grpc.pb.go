// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftingServiceClient is the client API for RaftingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftingServiceClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
}

type raftingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftingServiceClient(cc grpc.ClientConnInterface) RaftingServiceClient {
	return &raftingServiceClient{cc}
}

func (c *raftingServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/RaftingService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftingServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/RaftingService/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftingServiceServer is the server API for RaftingService service.
// All implementations must embed UnimplementedRaftingServiceServer
// for forward compatibility
type RaftingServiceServer interface {
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	mustEmbedUnimplementedRaftingServiceServer()
}

// UnimplementedRaftingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRaftingServiceServer struct {
}

func (UnimplementedRaftingServiceServer) Apply(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedRaftingServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedRaftingServiceServer) mustEmbedUnimplementedRaftingServiceServer() {}

// UnsafeRaftingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftingServiceServer will
// result in compilation errors.
type UnsafeRaftingServiceServer interface {
	mustEmbedUnimplementedRaftingServiceServer()
}

func RegisterRaftingServiceServer(s grpc.ServiceRegistrar, srv RaftingServiceServer) {
	s.RegisterService(&RaftingService_ServiceDesc, srv)
}

func _RaftingService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftingServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftingService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftingServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftingService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftingServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RaftingService/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftingServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftingService_ServiceDesc is the grpc.ServiceDesc for RaftingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RaftingService",
	HandlerType: (*RaftingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _RaftingService_Apply_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _RaftingService_GetDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/rafting_service.proto",
}
